(()=>{"use strict";function e(e,t){const r=function(){const e=(()=>{const e=new Array(10);for(let t=0;t<10;t++){e[t]={};for(let r=0;r<10;r++)e[t][r]={hit:!1,shipId:null}}return e})(),t=[],r=(t,r)=>null!==e[t][r].shipId,o=()=>t.filter((e=>!1===e.isSunk())).length;return{tiles:e,ships:t,placeShip:(r,[o,s],n)=>{const a=(e=>{let r;switch(e){case 5:r=0;break;case 4:r=1;break;case 2:r=4;break;case 3:r=t.some((e=>2===e.id))?3:2}return r})(r),c=function(e,t){const r=[...Array(t).keys()].reduce(((e,t)=>(e[t]=!1,e)),{});return{id:e,length:t,health:r,coords:[],hit:e=>{r[e]=!0},isSunk:()=>Object.values(r).every((e=>!0===e))}}(a,r);if(t.push(c),"x"===n)for(let t=0;t<c.length;t++)c.coords.push([o,s]),e[o][s].shipId=c.id,o+=1;if("y"===n)for(let t=0;t<c.length;t++)c.coords.push([o,s]),e[o][s].shipId=c.id,s+=1},hasShip:r,receiveAttack:o=>{const[s,n]=o,a=e[s][n];if(!a.hit){if(r(s,n)){const e=(e=>{let r;for(let o=0;o<t.length;o++)t[o].id===e&&(r=t[o]);return r})(a.shipId);for(let t=0;t<e.coords.length;t++)e.coords[t].every(((e,t)=>e===o[t]))&&(e.health[t]=!0)}a.hit=!0}},shipsRemaining:o,allShipsSunk:()=>0===o(),removeLastShip:()=>{const[r]=t.splice(t.length-1,1);for(let t=0;t<r.coords.length;t++){const[o,s]=r.coords[t];e[o][s].shipId=null}}}}(),o=[];return{get num(){return e},get board(){return r},get isHuman(){return t},get moves(){return o},makeMove:(e,t)=>{t.receiveAttack(e),o.push(e)}}}const t=document.querySelectorAll(".board"),r=document.querySelector("#player-board"),o=document.querySelector("#com-board"),s=document.querySelector("#game-info"),n=e=>{const t=(e.isHuman?r:o).previousElementSibling,s=e.board.shipsRemaining();t.textContent=`Ships remaining: ${s}`},a=e=>{const t=document.querySelectorAll(".ship-counter");e?t.forEach((e=>e.classList.add("opacity-0"))):t.forEach((e=>e.classList.remove("opacity-0")))},c=e=>{const t=e.isHuman?r:o,{ships:s}=e.board;Object.keys(s).forEach((e=>{const r=s[e],{id:o}=r,{coords:n}=r;for(let e=0;e<n.length;e++){const[r,s]=n[e],a=t.querySelector(`[data-x='${r}'][data-y='${s}']`);a.classList.add("ship"),a.dataset.shipId=o}})),n(e)},l=e=>{const t=e.isHuman?r:o,{board:s}=e,{tiles:a}=s;for(let e=0;e<a.length;e++)for(let r=0;r<Object.keys(a[e]).length;r++){const o=a[e][r],n=s.hasShip(e,r);if(o.hit){const o=t.querySelector(`[data-x='${e}'][data-y='${r}']`);n?o.classList.add("hit"):o.classList.add("miss")}}n(e)},i=e=>{e?t.forEach((e=>e.classList.add("game-over"))):t.forEach((e=>e.classList.remove("game-over")))},d=(...e)=>{t.forEach((e=>{e.querySelectorAll(".board-cell").forEach((e=>{e.classList.remove("miss","hit","ship"),e.removeAttribute("data-ship-id")}))})),e.forEach((e=>n(e))),i(!1)},u=(e,t)=>{const r={setup:`Board setup ... ${5-t} ship(s) to place`,ready:"Game ready to start",p1Turn:"Player's turn",comTurn:"thinking ..."};s.textContent=r[e]},h=(e,t)=>{const s="com"===t?o:r;e?s.classList.add("no-events"):s.classList.remove("no-events")},p=e=>{const t=document.querySelector("#start-btn");e?t.setAttribute("disabled",""):t.removeAttribute("disabled")},m=e=>{5===e?(p(!1),u("ready")):(p(!0),u("setup",e))},f=e=>{const t=document.querySelectorAll(".board-funcs"),r=document.querySelector("#player-buttons");e?(t.forEach((e=>e.setAttribute("disabled",""))),r.classList.add("opacity-0")):(t.forEach((e=>e.removeAttribute("disabled"))),r.classList.remove("opacity-0"))},y=e=>[Number(e.dataset.x),Number(e.dataset.y)],b=(e,t)=>{const r=e.moves;for(let e=0;e<r.length;e++)if(r[e].every(((e,r)=>e===t[r])))return!0;return!1},v=e=>{const[t,r]=e;return[[t+1,r],[t-1,r],[t,r+1],[t,r-1]].filter((e=>{const[t,r]=e;return t>=0&&t<=9&&r>=0&&r<=9}))},g=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],S=e=>{const t=(e=>{const{board:t}=e,{tiles:r}=t,o=[];for(let e=0;e<r.length;e++)for(let s=0;s<Object.keys(r[e]).length;s++)if(!t.hasShip(e,s)){const t=[e,s];o.push(t)}return o})(e);return t[Math.floor(Math.random()*t.length)]},L=e=>{switch(e){case 0:return 5;case 1:return 4;case 2:case 3:return 3;case 4:return 2;default:return null}},E=document.querySelector("#player-board"),k={x:!0,y:!1},q=()=>Object.keys(k).filter((e=>!0===k[e]))[0],x=()=>{k.x=!k.x,k.y=!k.x},A=(e,t,r)=>{const[o,s]=e,n=[];if("x"===t)for(let e=0;e<r;e++)n.push([e+o,s]);if("y"===t)for(let e=0;e<r;e++)n.push([o,e+s]);return n},M=(e,t,r)=>{const[o,s]=r;return"x"===t?o+e-1<=9:"y"===t&&s+e-1<=9},w=(e,t)=>{const{board:r}=t;for(let t=0;t<e.length;t++){const[o,s]=e[t];if(!0===r.hasShip(o,s))return!1}return!0},$=()=>{E.querySelectorAll(".board-cell").forEach((e=>e.classList.remove("ship-preview","invalid")))},I=(e,t)=>{let r,o,s=!1;for(;!s;){const n=S(e),a=["x","y"][Math.floor(2*Math.random())];s=M(t,a,n),r=n,o=a}return[r,o]},C=(e,t)=>{let r,o,s=!1;for(;!s;){const[n,a]=I(e,t),c=A(n,a,t);s=w(c,e),r=n,o=a}return[r,o]},T=(e,t=0)=>{const r=[5,4,3,3,2];for(let o=t;o<r.length;o++){const t=r[o],s=C(e,t);e.board.placeShip(t,...s)}},j={p1:null,com:null},O=e=>e.board.allShipsSunk(),H=()=>{j.p1=e(1,!0),j.com=e(2,!1),d(j.p1,j.com),p(!0),h(!0,"com"),h(!1,"player"),f(!1),u("setup",j.p1.board.ships.length),a(!0)},G=()=>{T(j.com),p(!0),l(j.com),h(!0,"player"),h(!1,"com"),f(!0),u("p1Turn"),a(!1)},N=e=>{h(!0,"com"),(e=>{const t=1===e.num?"Congratulations! You win!":"Game over ... Computer wins!";s.textContent=t,i(!0)})(e)},P=e=>{const{p1:t,com:r}=j;b(t,e)||(t.makeMove(e,r.board),l(r),O(r)?N(t):((async()=>{const{p1:e,com:t}=j,r=await(async(e,t)=>{const r=((e,t)=>{const r=e.moves.filter((([e,r])=>null!==t.board.tiles[e][r].shipId)),o=[];for(let e=0;e<r.length;e++){const t=r[e],s=v(t);for(let e=0;e<s.length;e++)o.push(s[e])}return o.filter((([e,r])=>!1===t.board.tiles[e][r].hit))})(e,t);let o;if(r.length>0)o=r[Math.floor(Math.random()*r.length)];else{let t=g();for(;b(e,t);)t=g();o=t}return await new Promise((e=>{setTimeout(e,400)})),o})(t,e);t.makeMove(r,e.board),l(e),O(e)?N(t):(h(!1,"com"),u("p1Turn"))})(),u("comTurn")),h(!0,"com"))},R=()=>j.p1.board.ships.length,B=e=>{const{p1:t}=j,r=R();if(e.target.classList.contains("board")||r>=5)return;const o=y(e.target),s=L(r),n=q(),a=((e,t,r,o)=>{if(M(o,r,t)){const s=A(t,r,o);if(w(s,e))return!0}return!1})(t,o,n,s);if(a){t.board.placeShip(s,o,n),$(),c(t);const e=R();m(e)}},Y=()=>{const{p1:e}=j;0!==e.board.ships.length&&(e.board.removeLastShip(),d(e),c(e),m(R()))},z=()=>{const{p1:e}=j,t=R();if(T(e,t),c(e),m(R()),5===t){for(let e=0;e<5;e++)Y();z()}};t.forEach((e=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++){const o=document.createElement("div");o.classList.add("board-cell"),o.dataset.x=r,o.dataset.y=t,e.appendChild(o)}})),H(),document.querySelectorAll("#com-board .board-cell").forEach((e=>{e.addEventListener("click",(e=>{const t=y(e.target);P(t)}))})),document.querySelector("#restart-btn").addEventListener("click",H),document.querySelector("#start-btn").addEventListener("click",G),document.querySelector("#auto-ship").addEventListener("click",z),document.querySelector("#rotate").addEventListener("click",x),document.querySelector("#undo-ship").addEventListener("click",Y),document.querySelector("#reset-ship").addEventListener("click",H),(()=>{const e=document.querySelector("#player-board");e.addEventListener("mouseover",(e=>{const t=R();((e,t)=>{if(e.target.classList.contains("board")||null===t)return;const r=((e,t,r,o)=>{const[s,n]=e,a=[];if("x"===r)for(let e=0;e<t&&!(e+s>9);e++){const t=o.querySelector(`[data-x='${e+s}'][data-y='${n}']`);a.push(t)}if("y"===r)for(let e=0;e<t&&!(e+n>9);e++){const t=o.querySelector(`[data-x='${s}'][data-y='${e+n}']`);a.push(t)}return a})(y(e.target),t,q(),E),o=((e,t)=>{const r=e.length===t,o=e.every((e=>!e.classList.contains("ship")));return r&&o})(r,t);o?r.forEach((e=>e.classList.add("ship-preview"))):r.forEach((e=>e.classList.add("invalid")))})(e,L(t))})),e.addEventListener("mouseout",$),e.addEventListener("click",B)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBRWUsU0FBU0EsRUFBY0MsRUFBS0MsR0FDekMsTUFBTUMsRUNETyxXQUNiLE1BY01DLEVBZGMsTUFDbEIsTUFBTUQsRUFBWSxJQUFJRSxNQUFNLElBQzVCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDM0JILEVBQVVHLEdBQUssR0FDZixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUN0QkosRUFBVUcsR0FBR0MsR0FBSyxDQUNoQkMsS0FBSyxFQUNMQyxPQUFRLE1BSWQsT0FBT04sR0FHS08sR0FFUkMsRUFBUSxHQW9EUkMsRUFBVSxDQUFDQyxFQUFHQyxJQUE2QixPQUF2QlYsRUFBTVMsR0FBR0MsR0FBR0wsT0E4QmhDTSxFQUFpQixJQUNESixFQUFNSyxRQUFRQyxJQUEyQixJQUFsQkEsRUFBS0MsV0FDN0JDLE9BUXJCLE1BQU8sQ0FDTGYsUUFDQU8sUUFDQVMsVUF6RWdCLENBQUNELEdBQVNOLEVBQUdDLEdBQUlPLEtBQ2pDLE1BQU1aLEVBckJVLENBQUNVLElBQ2pCLElBQUlHLEVBQ0osT0FBUUgsR0FDTixLQUFLLEVBQ0hHLEVBQUssRUFDTCxNQUNGLEtBQUssRUFDSEEsRUFBSyxFQUNMLE1BQ0YsS0FBSyxFQUNIQSxFQUFLLEVBQ0wsTUFDRixLQUFLLEVBQ0hBLEVBQUtYLEVBQU1ZLE1BQU1OLEdBQXFCLElBQVpBLEVBQUtLLEtBQVksRUFBSSxFQUluRCxPQUFPQSxHQUlRRSxDQUFVTCxHQUNuQk0sRUMzQ0ssU0FBcUJILEVBQUlILEdBQ3RDLE1BV01PLEVBVlUsSUFBSXJCLE1BVVFjLEdBVklRLFFBQ1RDLFFBQU8sQ0FBQ0MsRUFBTUMsS0FDakNELEVBQUtDLElBQVEsRUFDTkQsSUFDTixJQW9CTCxNQUFPLENBQ0xQLEtBQ0FILFNBQ0FPLFNBQ0FLLE9BcEJhLEdBcUJidkIsSUFiV3dCLElBQ1hOLEVBQU9NLElBQVMsR0FhaEJkLE9BVmEsSUFDTmUsT0FBT0MsT0FBT1IsR0FBUVMsT0FBT0gsSUFBb0IsSUFBVkEsS0RvQjlCSSxDQUFZM0IsRUFBUVUsR0FFcEMsR0FEQVIsRUFBTTBCLEtBQUtaLEdBQ0UsTUFBVEosRUFFRixJQUFLLElBQUlmLEVBQUksRUFBR0EsRUFBSW1CLEVBQVFOLE9BQVFiLElBQ2xDbUIsRUFBUU0sT0FBT00sS0FBSyxDQUFDeEIsRUFBR0MsSUFDeEJWLEVBQU1TLEdBQUdDLEdBQUdMLE9BQVNnQixFQUFRSCxHQUM3QlQsR0FBSyxFQUdULEdBQWEsTUFBVFEsRUFFRixJQUFLLElBQUlmLEVBQUksRUFBR0EsRUFBSW1CLEVBQVFOLE9BQVFiLElBQ2xDbUIsRUFBUU0sT0FBT00sS0FBSyxDQUFDeEIsRUFBR0MsSUFDeEJWLEVBQU1TLEdBQUdDLEdBQUdMLE9BQVNnQixFQUFRSCxHQUM3QlIsR0FBSyxHQXlEVEYsVUFDQTBCLGNBakNxQkMsSUFDckIsTUFBTzFCLEVBQUdDLEdBQUt5QixFQUNUQyxFQUFXcEMsRUFBTVMsR0FBR0MsR0FDMUIsSUFBSTBCLEVBQVNoQyxJQUFiLENBRUEsR0FBSUksRUFBUUMsRUFBR0MsR0FBSSxDQUNqQixNQUFNMkIsRUFoQk8sQ0FBQ25CLElBQ2hCLElBQUltQixFQUNKLElBQUssSUFBSW5DLEVBQUksRUFBR0EsRUFBSUssRUFBTVEsT0FBUWIsSUFDNUJLLEVBQU1MLEdBQUdnQixLQUFPQSxJQUNsQm1CLEVBQVc5QixFQUFNTCxJQUdyQixPQUFPbUMsR0FTWUMsQ0FBU0YsRUFBUy9CLFFBQ25DLElBQUssSUFBSUgsRUFBSSxFQUFHQSxFQUFJbUMsRUFBU1YsT0FBT1osT0FBUWIsSUFFeENtQyxFQUFTVixPQUFPekIsR0FBRzZCLE9BQU0sQ0FBQ1EsRUFBT1gsSUFBVVcsSUFBVUosRUFBT1AsT0FFNURTLEVBQVNmLE9BQU9wQixJQUFLLEdBSTNCa0MsRUFBU2hDLEtBQU0sSUFtQmZPLGlCQUNBNkIsYUFabUIsSUFFRSxJQURIN0IsSUFZbEI4QixlQXhEcUIsS0FDckIsTUFBTzVCLEdBQVFOLEVBQU1tQyxPQUFPbkMsRUFBTVEsT0FBUyxFQUFHLEdBQzlDLElBQUssSUFBSWIsRUFBSSxFQUFHQSxFQUFJVyxFQUFLYyxPQUFPWixPQUFRYixJQUFLLENBQzNDLE1BQU9PLEVBQUdDLEdBQUtHLEVBQUtjLE9BQU96QixHQUMzQkYsRUFBTVMsR0FBR0MsR0FBR0wsT0FBUyxRRGhFUHNDLEdBQ1pDLEVBQVEsR0FNZCxNQUFPLENBQ0QvQyxVQUNGLE9BQU9BLEdBRUxnRCxZQUNGLE9BQU85QyxHQUVMK0MsY0FDRixPQUFPaEQsR0FFTDhDLFlBQ0YsT0FBT0EsR0FFVEcsU0FsQmUsQ0FBQ1osRUFBUWEsS0FDeEJBLEVBQVdkLGNBQWNDLEdBQ3pCUyxFQUFNWCxLQUFLRSxLR1BmLE1BQU1jLEVBQWFDLFNBQVNDLGlCQUFpQixVQUN2Q0MsRUFBY0YsU0FBU0csY0FBYyxpQkFDckNDLEVBQVdKLFNBQVNHLGNBQWMsY0FDbENFLEVBQVdMLFNBQVNHLGNBQWMsY0FFbENHLEVBQW1CQyxJQUN2QixNQUNNQyxHQURZRCxFQUFPWCxRQUFVTSxFQUFjRSxHQUNuQkssdUJBQ3hCaEQsRUFBaUI4QyxFQUFPWixNQUFNbEMsaUJBRXBDK0MsRUFBWUUsWUFBYyxvQkFBb0JqRCxLQUcxQ2tELEVBQWlCQyxJQUNyQixNQUFNQyxFQUFlYixTQUFTQyxpQkFBaUIsaUJBQzNDVyxFQUNGQyxFQUFhQyxTQUFTQyxHQUFZQSxFQUFRQyxVQUFVQyxJQUFJLGVBRXhESixFQUFhQyxTQUFTQyxHQUFZQSxFQUFRQyxVQUFVRSxPQUFPLGdCQW1CekRDLEVBQWVaLElBQ25CLE1BQU1aLEVBQVFZLEVBQU9YLFFBQVVNLEVBQWNFLEdBQ3ZDLE1BQUUvQyxHQUFVa0QsRUFBT1osTUFFUmhCLE9BQU9OLEtBQUtoQixHQUNwQnlELFNBQVNNLElBQ2hCLE1BQU16RCxFQUFPTixFQUFNK0QsSUFDYixHQUFFcEQsR0FBT0wsR0FDVCxPQUFFYyxHQUFXZCxFQUNuQixJQUFLLElBQUlYLEVBQUksRUFBR0EsRUFBSXlCLEVBQU9aLE9BQVFiLElBQUssQ0FDdEMsTUFBT08sRUFBR0MsR0FBS2lCLEVBQU96QixHQUNoQnFFLEVBQVcxQixFQUFNUSxjQUFjLFlBQVk1QyxlQUFlQyxPQUNoRTZELEVBQVNMLFVBQVVDLElBQUksUUFDdkJJLEVBQVNDLFFBQVFuRSxPQUFTYSxNQUc5QnNDLEVBQWdCQyxJQUdaZ0IsRUFBZWhCLElBQ25CLE1BQU1pQixFQUFZakIsRUFBT1gsUUFBVU0sRUFBY0UsR0FDM0MsTUFBRVQsR0FBVVksR0FDWixNQUFFekQsR0FBVTZDLEVBQ2xCLElBQUssSUFBSTNDLEVBQUksRUFBR0EsRUFBSUYsRUFBTWUsT0FBUWIsSUFDaEMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUkwQixPQUFPTixLQUFLdkIsRUFBTUUsSUFBSWEsT0FBUVosSUFBSyxDQUNyRCxNQUFNaUMsRUFBV3BDLEVBQU1FLEdBQUdDLEdBQ3BCSyxFQUFVcUMsRUFBTXJDLFFBQVFOLEVBQUdDLEdBQ2pDLEdBQUlpQyxFQUFTaEMsSUFBSyxDQUNoQixNQUFNbUUsRUFBV0csRUFBVXJCLGNBQ3pCLFlBQVluRCxlQUFlQyxPQUV6QkssRUFDRitELEVBQVNMLFVBQVVDLElBQUksT0FFdkJJLEVBQVNMLFVBQVVDLElBQUksU0FLL0JYLEVBQWdCQyxJQUdaa0IsRUFBaUJiLElBQ2pCQSxFQUNGYixFQUFXZSxTQUFTbkIsR0FBVUEsRUFBTXFCLFVBQVVDLElBQUksZUFFbERsQixFQUFXZSxTQUFTbkIsR0FBVUEsRUFBTXFCLFVBQVVFLE9BQU8sZ0JBSW5EUSxFQUFVLElBQUlDLEtBQ2xCNUIsRUFBV2UsU0FBU25CLElBQ0pBLEVBQU1NLGlCQUFpQixlQUMvQmEsU0FBU2MsSUFDYkEsRUFBS1osVUFBVUUsT0FBTyxPQUFRLE1BQU8sUUFDckNVLEVBQUtDLGdCQUFnQixzQkFHekJGLEVBQVFiLFNBQVNQLEdBQVdELEVBQWdCQyxLQUM1Q2tCLEdBQWMsSUFHVkssRUFBYyxDQUFDQyxFQUFPQyxLQUMxQixNQUNNQyxFQUFXLENBQ2ZDLE1BQU8sbUJBRmMsRUFBSUYscUJBR3pCRyxNQUFPLHNCQUNQQyxPQUFRLGdCQUNSQyxRQUFTLGdCQUVYaEMsRUFBU0ssWUFBY3VCLEVBQVNGLElBYTVCTyxFQUFnQixDQUFDMUIsRUFBTWpCLEtBQzNCLE1BQU02QixFQUFzQixRQUFWN0IsRUFBa0JTLEVBQVdGLEVBQzNDVSxFQUNGWSxFQUFVUixVQUFVQyxJQUFJLGFBRXhCTyxFQUFVUixVQUFVRSxPQUFPLGNBSXpCcUIsRUFBZVIsSUFDbkIsTUFBTVMsRUFBV3hDLFNBQVNHLGNBQWMsY0FFcEM0QixFQUNGUyxFQUFTQyxhQUFhLFdBQVksSUFFbENELEVBQVNYLGdCQUFnQixhQUl2QmEsRUFBYTdFLElBQ0YsSUFBWEEsR0FDRjBFLEdBQVksR0FDWlQsRUFBWSxXQUVaUyxHQUFZLEdBQ1pULEVBQVksUUFBU2pFLEtBSW5COEUsRUFBcUIvQixJQUN6QixNQUFNZ0MsRUFBYTVDLFNBQVNDLGlCQUFpQixnQkFDdkM0QyxFQUFrQjdDLFNBQVNHLGNBQWMsbUJBQzNDUyxHQUNGZ0MsRUFBVzlCLFNBQVNnQyxHQUFXQSxFQUFPTCxhQUFhLFdBQVksTUFDL0RJLEVBQWdCN0IsVUFBVUMsSUFBSSxlQUU5QjJCLEVBQVc5QixTQUFTZ0MsR0FBV0EsRUFBT2pCLGdCQUFnQixjQUN0RGdCLEVBQWdCN0IsVUFBVUUsT0FBTyxlQzdKL0I2QixFQUFlOUQsR0FDWixDQUFDK0QsT0FBTy9ELEVBQU9xQyxRQUFRL0QsR0FBSXlGLE9BQU8vRCxFQUFPcUMsUUFBUTlELElBR3BEeUYsRUFBZ0IsQ0FBQzFDLEVBQVF0QixLQUM3QixNQUFNaUUsRUFBZ0IzQyxFQUFPYixNQUM3QixJQUFLLElBQUkxQyxFQUFJLEVBQUdBLEVBQUlrRyxFQUFjckYsT0FBUWIsSUFDeEMsR0FBSWtHLEVBQWNsRyxHQUFHNkIsT0FBTSxDQUFDUSxFQUFPWCxJQUFVVyxJQUFVSixFQUFPUCxLQUM1RCxPQUFPLEVBR1gsT0FBTyxHQUdIeUUsRUFBb0JDLElBQ3hCLE1BQU83RixFQUFHQyxHQUFLNEYsRUFPZixNQU5zQixDQUNwQixDQUFDN0YsRUFBSSxFQUFHQyxHQUNSLENBQUNELEVBQUksRUFBR0MsR0FDUixDQUFDRCxFQUFHQyxFQUFJLEdBQ1IsQ0FBQ0QsRUFBR0MsRUFBSSxJQUVXRSxRQUFRMkYsSUFDM0IsTUFBT0MsRUFBR0MsR0FBS0YsRUFDZixPQUFPQyxHQUFLLEdBQUtBLEdBQUssR0FBS0MsR0FBSyxHQUFLQSxHQUFLLE1BVXhDQyxFQUFnQixJQUNMLENBQ2JDLEtBQUtDLE1BQXNCLEdBQWhCRCxLQUFLRSxVQUNoQkYsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUtFLFdBcUJkQyxFQUFrQnJELElBQ3RCLE1BQU1zRCxFQWpCYyxDQUFDdEQsSUFDckIsTUFBTSxNQUFFWixHQUFVWSxHQUNaLE1BQUV6RCxHQUFVNkMsRUFDWmtFLEVBQWEsR0FDbkIsSUFBSyxJQUFJN0csRUFBSSxFQUFHQSxFQUFJRixFQUFNZSxPQUFRYixJQUNoQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSTBCLE9BQU9OLEtBQUt2QixFQUFNRSxJQUFJYSxPQUFRWixJQUVoRCxJQURnQjBDLEVBQU1yQyxRQUFRTixFQUFHQyxHQUNuQixDQUNaLE1BQU02RyxFQUFRLENBQUM5RyxFQUFHQyxHQUNsQjRHLEVBQVc5RSxLQUFLK0UsR0FJdEIsT0FBT0QsR0FJWUUsQ0FBY3hELEdBRWpDLE9BQU9zRCxFQUFXSixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXRSxFQUFXaEcsVUFHcERtRyxFQUFrQkMsSUFDdEIsT0FBUUEsR0FDTixLQUFLLEVBQ0gsT0FBTyxFQUNULEtBQUssRUFDSCxPQUFPLEVBQ1QsS0FBSyxFQUVMLEtBQUssRUFDSCxPQUFPLEVBQ1QsS0FBSyxFQUNILE9BQU8sRUFDVCxRQUNFLE9BQU8sT0MzRVAsRUFBY2pFLFNBQVNHLGNBQWMsaUJBR3JDK0QsRUFBTyxDQUNYM0csR0FBRyxFQUNIQyxHQUFHLEdBR0MyRyxFQUFVLElBQ0R4RixPQUFPTixLQUFLNkYsR0FDYnhHLFFBQVEwRCxJQUFzQixJQUFkOEMsRUFBSzlDLEtBQWUsR0FHNUNnRCxFQUFhLEtBQ2pCRixFQUFLM0csR0FBSzJHLEVBQUszRyxFQUNmMkcsRUFBSzFHLEdBQUswRyxFQUFLM0csR0FJWDhHLEVBQVksQ0FBQ0MsRUFBT3ZHLEVBQU1GLEtBQzlCLE1BQU9OLEVBQUdDLEdBQUs4RyxFQUNUQyxFQUFhLEdBRW5CLEdBQWEsTUFBVHhHLEVBQ0YsSUFBSyxJQUFJZixFQUFJLEVBQUdBLEVBQUlhLEVBQVFiLElBQzFCdUgsRUFBV3hGLEtBQUssQ0FBQy9CLEVBQUlPLEVBQUdDLElBSTVCLEdBQWEsTUFBVE8sRUFDRixJQUFLLElBQUlmLEVBQUksRUFBR0EsRUFBSWEsRUFBUWIsSUFDMUJ1SCxFQUFXeEYsS0FBSyxDQUFDeEIsRUFBR1AsRUFBSVEsSUFJNUIsT0FBTytHLEdBS0hDLEVBQWMsQ0FBQzNHLEVBQVFFLEVBQU0wRyxLQUNqQyxNQUFPbEgsRUFBR0MsR0FBS2lILEVBQ2YsTUFBYSxNQUFUMUcsRUFDS1IsRUFBSU0sRUFBUyxHQUFLLEVBRWQsTUFBVEUsR0FDS1AsRUFBSUssRUFBUyxHQUFLLEdBTXZCNkcsRUFBWSxDQUFDL0csRUFBTTRDLEtBQ3ZCLE1BQU0sTUFBRVosR0FBVVksRUFDbEIsSUFBSyxJQUFJdkQsRUFBSSxFQUFHQSxFQUFJVyxFQUFLRSxPQUFRYixJQUFLLENBQ3BDLE1BQU9PLEVBQUdDLEdBQUtHLEVBQUtYLEdBQ3BCLElBQTRCLElBQXhCMkMsRUFBTXJDLFFBQVFDLEVBQUdDLEdBQ25CLE9BQU8sRUFHWCxPQUFPLEdBcUVIbUgsRUFBZSxLQUNMLEVBQVkxRSxpQkFBaUIsZUFDckNhLFNBQVNjLEdBQVNBLEVBQUtaLFVBQVVFLE9BQU8sZUFBZ0IsY0M1RjFEMEQsRUFBZ0IsQ0FBQ3JFLEVBQVExQyxLQUM3QixJQUFJNEcsRUFDQTFHLEVBQ0E4RyxHQUFXLEVBQ2YsTUFBUUEsR0FBVSxDQUNoQixNQUFNQyxFQUFjLEVBQXVCdkUsR0FDckN3RSxFRmtDa0IsQ0FBQyxJQUFLLEtBQUt0QixLQUFLQyxNQUFzQixFQUFoQkQsS0FBS0UsV0VqQ25Ea0IsRUFBVyxFQUF3QmhILEVBQVFrSCxFQUFZRCxHQUN2REwsRUFBYUssRUFDYi9HLEVBQU9nSCxFQUVULE1BQU8sQ0FBQ04sRUFBWTFHLElBTWhCaUgsRUFBYSxDQUFDekUsRUFBUTFDLEtBQzFCLElBQUl5RyxFQUNBdkcsRUFDQWtILEdBQVEsRUFDWixNQUFRQSxHQUFPLENBQ2IsTUFBT0gsRUFBYUMsR0FBY0gsRUFBY3JFLEVBQVExQyxHQUNsREYsRUFBTyxFQUFzQm1ILEVBQWFDLEVBQVlsSCxHQUM1RG9ILEVBQVEsRUFBc0J0SCxFQUFNNEMsR0FDcEMrRCxFQUFRUSxFQUNSL0csRUFBT2dILEVBRVQsTUFBTyxDQUFDVCxFQUFPdkcsSUFHWG1ILEVBQVksQ0FBQzNFLEVBQVE0RSxFQUFhLEtBQ3RDLE1BQU05SCxFQUFRLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUUzQixJQUFLLElBQUlMLEVBQUltSSxFQUFZbkksRUFBSUssRUFBTVEsT0FBUWIsSUFBSyxDQUM5QyxNQUFNYSxFQUFTUixFQUFNTCxHQUNmVyxFQUFPcUgsRUFBV3pFLEVBQVExQyxHQUNoQzBDLEVBQU9aLE1BQU03QixVQUFVRCxLQUFXRixLQ3hFaENnRSxFQUFVLENBQ2R5RCxHQUFJLEtBQ0pDLElBQUssTUFHREMsRUFBa0IvRSxHQUFXQSxFQUFPWixNQUFNTCxlQUUxQ2lHLEVBQVUsS0FDZDVELEVBQVF5RCxHQUFLMUksRUFBYyxHQUFHLEdBQzlCaUYsRUFBUTBELElBQU0zSSxFQUFjLEdBQUcsR0FFL0IsRUFBWWlGLEVBQVF5RCxHQUFJekQsRUFBUTBELEtBQ2hDLEdBQWdCLEdBQ2hCLEdBQWtCLEVBQU0sT0FDeEIsR0FBa0IsRUFBTyxVQUN6QixHQUFzQixHQUN0QixFQUFnQixRQUFTMUQsRUFBUXlELEdBQUd6RixNQUFNdEMsTUFBTVEsUUFDaEQsR0FBa0IsSUFHZDJILEVBQVksS0FDaEIsRUFBbUI3RCxFQUFRMEQsS0FFM0IsR0FBZ0IsR0FDaEIsRUFBZ0IxRCxFQUFRMEQsS0FDeEIsR0FBa0IsRUFBTSxVQUN4QixHQUFrQixFQUFPLE9BQ3pCLEdBQXNCLEdBQ3RCLEVBQWdCLFVBQ2hCLEdBQWtCLElBR2RJLEVBQVdDLElBQ2YsR0FBa0IsRUFBTSxPSnVFRCxDQUFDQSxJQUN4QixNQUFNQyxFQUNXLElBQWZELEVBQU8vSSxJQUNILDRCQUNBLCtCQUVOMEQsRUFBU0ssWUFBY2lGLEVBQ3ZCbEUsR0FBYyxJSTdFZCxDQUFxQmlFLElBbUJqQkUsRUFBcUI5QixJQUN6QixNQUFNLEdBQUVzQixFQUFFLElBQUVDLEdBQVExRCxFQUNoQixFQUFzQnlELEVBQUl0QixLQUM5QnNCLEVBQUd2RixTQUFTaUUsRUFBT3VCLEVBQUkxRixPQUN2QixFQUFnQjBGLEdBRUNDLEVBQWVELEdBRTlCSSxFQUFRTCxJQXhCUVMsV0FDbEIsTUFBTSxHQUFFVCxFQUFFLElBQUVDLEdBQVExRCxFQUNkbUUsT0R2QldELE9BQU9SLEVBQUs5RSxLQUM3QixNQUFNd0YsRUFwQmtCLEVBQUNWLEVBQUs5RSxLQUM5QixNQUFNeUYsRUFBZVgsRUFBSTNGLE1BQU1oQyxRQUFPLEVBQUVILEVBQUdDLEtBQ0UsT0FBcEMrQyxFQUFPWixNQUFNN0MsTUFBTVMsR0FBR0MsR0FBR0wsU0FHNUI4SSxFQUFnQixHQUN0QixJQUFLLElBQUlqSixFQUFJLEVBQUdBLEVBQUlnSixFQUFhbkksT0FBUWIsSUFBSyxDQUM1QyxNQUFNb0csRUFBTzRDLEVBQWFoSixHQUNwQmtKLEVBQVMsRUFBeUI5QyxHQUN4QyxJQUFLLElBQUluRyxFQUFJLEVBQUdBLEVBQUlpSixFQUFPckksT0FBUVosSUFDakNnSixFQUFjbEgsS0FBS21ILEVBQU9qSixJQUk5QixPQUFPZ0osRUFBY3ZJLFFBQU8sRUFBRUgsRUFBR0MsTUFDUyxJQUFqQytDLEVBQU9aLE1BQU03QyxNQUFNUyxHQUFHQyxHQUFHTixPQUtaaUosQ0FBa0JkLEVBQUs5RSxHQUM3QyxJQUFJNkYsRUFDSixHQUFJTCxFQUFjbEksT0FBUyxFQUN6QnVJLEVBQU9MLEVBQWN0QyxLQUFLQyxNQUFNRCxLQUFLRSxTQUFXb0MsRUFBY2xJLGFBQ3pELENBQ0wsSUFBSXdJLEVBQWEsSUFDakIsS0FBTyxFQUFzQmhCLEVBQUtnQixJQUNoQ0EsRUFBYSxJQUVmRCxFQUFPQyxFQUdULGFGTk8sSUFBSUMsU0FBU0MsSUFDbEJDLFdBQVdELEVFSVMsUUFDZkgsR0NVaUIsQ0FBb0JmLEVBQUtELEdBRWpEQyxFQUFJeEYsU0FBU2lHLEVBQVdWLEVBQUd6RixPQUMzQixFQUFnQnlGLEdBRUNFLEVBQWVGLEdBRTlCSyxFQUFRSixJQUVSLEdBQWtCLEVBQU8sT0FDekIsRUFBZ0IsWUFjaEJvQixHQUNBLEVBQWdCLFlBRWxCLEdBQWtCLEVBQU0sU0FHcEJDLEVBQWlCLElBQU0vRSxFQUFReUQsR0FBR3pGLE1BQU10QyxNQUFNUSxPQUU5Q0MsRUFBYTZJLElBQ2pCLE1BQU0sR0FBRXZCLEdBQU96RCxFQUNUaUYsRUFBbUJGLElBRXpCLEdBQUlDLEVBQUUxSCxPQUFPK0IsVUFBVTZGLFNBQVMsVUFBWUQsR0FBb0IsRUFDOUQsT0FHRixNQUFNbkMsRUFBYSxFQUFvQmtDLEVBQUUxSCxRQUNuQzZILEVBQVcsRUFBdUJGLEdBQ2xDN0ksRUFBTyxJQUNQZ0osRUZ2QlksRUFBQ3hHLEVBQVErRCxFQUFPdkcsRUFBTUYsS0FHeEMsR0FGaUIyRyxFQUFZM0csRUFBUUUsRUFBTXVHLEdBRTdCLENBQ1osTUFBTTNHLEVBQU8wRyxFQUFVQyxFQUFPdkcsRUFBTUYsR0FDcEMsR0FBSTZHLEVBQVUvRyxFQUFNNEMsR0FDbEIsT0FBTyxFQUdYLE9BQU8sR0VjVyxDQUF3QjZFLEVBQUlYLEVBQVkxRyxFQUFNK0ksR0FFaEUsR0FBSUMsRUFBVyxDQUNiM0IsRUFBR3pGLE1BQU03QixVQUFVZ0osRUFBVXJDLEVBQVkxRyxHQUN6QyxJQUNBLEVBQWdCcUgsR0FFaEIsTUFBTTRCLEVBQWlCTixJQUN2QixFQUFjTSxLQUlaQyxFQUFXLEtBQ2YsTUFBTSxHQUFFN0IsR0FBT3pELEVBQ2UsSUFBMUJ5RCxFQUFHekYsTUFBTXRDLE1BQU1RLFNBQ25CdUgsRUFBR3pGLE1BQU1KLGlCQUVULEVBQVk2RixHQUNaLEVBQWdCQSxHQUNoQixFQUFjc0IsT0FHVlEsRUFBa0IsS0FDdEIsTUFBTSxHQUFFOUIsR0FBT3pELEVBQ1R3RixFQUFjVCxJQU1wQixHQUpBLEVBQW1CdEIsRUFBSStCLEdBQ3ZCLEVBQWdCL0IsR0FDaEIsRUFBY3NCLEtBRU0sSUFBaEJTLEVBQW1CLENBQ3JCLElBQUssSUFBSW5LLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNyQmlLLElBRUZDLE1KbkdGbkgsRUFBV2UsU0FBU25CLElBQ2xCLElBQUssSUFBSTNDLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUN0QixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUFLLENBQzNCLE1BQU1tSyxFQUFZcEgsU0FBU3FILGNBQWMsT0FFekNELEVBQVVwRyxVQUFVQyxJQUFJLGNBQ3hCbUcsRUFBVTlGLFFBQVEvRCxFQUFJTixFQUN0Qm1LLEVBQVU5RixRQUFROUQsRUFBSVIsRUFDdEIyQyxFQUFNMkgsWUFBWUYsT0t6QjFCLElDRG1CcEgsU0FBU0MsaUJBQWlCLDBCQUNsQ2EsU0FBU2MsSUFDaEJBLEVBQUsyRixpQkFBaUIsU0FBVVosSUFDOUIsTUFBTTdDLEVBQVEsRUFBb0I2QyxFQUFFMUgsUUFDcEMsRUFBdUI2RSxTQU1SOUQsU0FBU0csY0FBYyxnQkFDL0JvSCxpQkFBaUIsUUFBUyxHQUVwQnZILFNBQVNHLGNBQWMsY0FDL0JvSCxpQkFBaUIsUUFBUyxHQUVuQnZILFNBQVNHLGNBQWMsY0FDL0JvSCxpQkFBaUIsUUFBUyxHQUVoQnZILFNBQVNHLGNBQWMsV0FDL0JvSCxpQkFBaUIsUUFBUyxHQUVwQnZILFNBQVNHLGNBQWMsY0FDL0JvSCxpQkFBaUIsUUFBUyxHQUVqQnZILFNBQVNHLGNBQWMsZUFDL0JvSCxpQkFBaUIsUUFBUyxHQUdYLE1BQ3hCLE1BQU1ySCxFQUFjRixTQUFTRyxjQUFjLGlCQUMzQ0QsRUFBWXFILGlCQUFpQixhQUFjWixJQUN6QyxNQUFNUSxFQUFjLElKK0VKLEVBQUNSLEVBQUc5SSxLQUN0QixHQUFJOEksRUFBRTFILE9BQU8rQixVQUFVNkYsU0FBUyxVQUF1QixPQUFYaEosRUFBaUIsT0FFN0QsTUFFTTBHLEVBbkNhLEVBQUNELEVBQU96RyxFQUFRRSxFQUFNNEIsS0FDekMsTUFBT3BDLEVBQUdDLEdBQUs4RyxFQUNUQyxFQUFhLEdBRW5CLEdBQWEsTUFBVHhHLEVBQ0YsSUFBSyxJQUFJZixFQUFJLEVBQUdBLEVBQUlhLEtBRWRiLEVBQUlPLEVBQUksR0FGY1AsSUFBSyxDQUcvQixNQUFNd0ssRUFBVzdILEVBQU1RLGNBQ3JCLFlBQVluRCxFQUFJTyxlQUFlQyxPQUVqQytHLEVBQVd4RixLQUFLeUksR0FJcEIsR0FBYSxNQUFUekosRUFDRixJQUFLLElBQUlmLEVBQUksRUFBR0EsRUFBSWEsS0FFZGIsRUFBSVEsRUFBSSxHQUZjUixJQUFLLENBSS9CLE1BQU13SyxFQUFXN0gsRUFBTVEsY0FDckIsWUFBWTVDLGVBQWVQLEVBQUlRLE9BRWpDK0csRUFBV3hGLEtBQUt5SSxHQUlwQixPQUFPakQsR0FRWWtELENBRkcsRUFBb0JkLEVBQUUxSCxRQUVHcEIsRUFEbENzRyxJQUNnRCxHQUN2RHVELEVBNUNlLEVBQUNqSixFQUFRWixLQUM5QixNQUFNOEosRUFBaUJsSixFQUFPWixTQUFXQSxFQUNuQytKLEVBQWVuSixFQUFPSSxPQUN6QmlGLElBQVdBLEVBQU05QyxVQUFVNkYsU0FBUyxVQUV2QyxPQUFPYyxHQUFrQkMsR0F1Q0pDLENBQWV0RCxFQUFZMUcsR0FFNUM2SixFQUNGbkQsRUFBV3pELFNBQVNjLEdBQVNBLEVBQUtaLFVBQVVDLElBQUksa0JBRWhEc0QsRUFBV3pELFNBQVNjLEdBQVNBLEVBQUtaLFVBQVVDLElBQUksY0l4RmhELENBQXdCMEYsRUFEUCxFQUF1QlEsT0FHMUNqSCxFQUFZcUgsaUJBQWlCLFdBQVksR0FDekNySCxFQUFZcUgsaUJBQWlCLFFBQVMsSURoQ3hDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvcGxheWVyRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvZ2FtZWJvYXJkRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2RvbS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2JvdExvZ2ljLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2V2ZW50Q29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZEZhY3RvcnknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbGF5ZXJGYWN0b3J5KG51bSwgaHVtYW4pIHtcbiAgY29uc3QgZ2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICBjb25zdCBtb3ZlcyA9IFtdO1xuICBjb25zdCBtYWtlTW92ZSA9ICh0YXJnZXQsIGVuZW15Qm9hcmQpID0+IHtcbiAgICBlbmVteUJvYXJkLnJlY2VpdmVBdHRhY2sodGFyZ2V0KTtcbiAgICBtb3Zlcy5wdXNoKHRhcmdldCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgbnVtKCkge1xuICAgICAgcmV0dXJuIG51bTtcbiAgICB9LFxuICAgIGdldCBib2FyZCgpIHtcbiAgICAgIHJldHVybiBnYW1lYm9hcmQ7XG4gICAgfSxcbiAgICBnZXQgaXNIdW1hbigpIHtcbiAgICAgIHJldHVybiBodW1hbjtcbiAgICB9LFxuICAgIGdldCBtb3ZlcygpIHtcbiAgICAgIHJldHVybiBtb3ZlcztcbiAgICB9LFxuICAgIG1ha2VNb3ZlLFxuICB9O1xufVxuIiwiaW1wb3J0IHNoaXBGYWN0b3J5IGZyb20gJy4vc2hpcEZhY3RvcnknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnYW1lYm9hcmRGYWN0b3J5KCkge1xuICBjb25zdCBjcmVhdGVCb2FyZCA9ICgpID0+IHtcbiAgICBjb25zdCBnYW1lYm9hcmQgPSBuZXcgQXJyYXkoMTApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgZ2FtZWJvYXJkW2ldID0ge307XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgZ2FtZWJvYXJkW2ldW2pdID0ge1xuICAgICAgICAgIGhpdDogZmFsc2UsXG4gICAgICAgICAgc2hpcElkOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2FtZWJvYXJkO1xuICB9O1xuXG4gIGNvbnN0IHRpbGVzID0gY3JlYXRlQm9hcmQoKTtcblxuICBjb25zdCBzaGlwcyA9IFtdO1xuXG4gIGNvbnN0IG1hcFNoaXBJZCA9IChsZW5ndGgpID0+IHtcbiAgICBsZXQgaWQ7XG4gICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgaWQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaWQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWQgPSA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaWQgPSBzaGlwcy5zb21lKChzaGlwKSA9PiBzaGlwLmlkID09PSAyKSA/IDMgOiAyO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIE5vIGRlZmF1bHRcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9IChsZW5ndGgsIFt4LCB5XSwgYXhpcykgPT4ge1xuICAgIGNvbnN0IHNoaXBJZCA9IG1hcFNoaXBJZChsZW5ndGgpO1xuICAgIGNvbnN0IG5ld1NoaXAgPSBzaGlwRmFjdG9yeShzaGlwSWQsIGxlbmd0aCk7XG4gICAgc2hpcHMucHVzaChuZXdTaGlwKTtcbiAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAvLyBQbGFjZSBob3Jpem9udGFsbHlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTaGlwLmNvb3Jkcy5wdXNoKFt4LCB5XSk7XG4gICAgICAgIHRpbGVzW3hdW3ldLnNoaXBJZCA9IG5ld1NoaXAuaWQ7XG4gICAgICAgIHggKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgLy8gUGxhY2UgdmVydGljYWxseVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdTaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1NoaXAuY29vcmRzLnB1c2goW3gsIHldKTtcbiAgICAgICAgdGlsZXNbeF1beV0uc2hpcElkID0gbmV3U2hpcC5pZDtcbiAgICAgICAgeSArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCByZW1vdmVMYXN0U2hpcCA9ICgpID0+IHtcbiAgICBjb25zdCBbc2hpcF0gPSBzaGlwcy5zcGxpY2Uoc2hpcHMubGVuZ3RoIC0gMSwgMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgW3gsIHldID0gc2hpcC5jb29yZHNbaV07XG4gICAgICB0aWxlc1t4XVt5XS5zaGlwSWQgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYXNTaGlwID0gKHgsIHkpID0+IHRpbGVzW3hdW3ldLnNoaXBJZCAhPT0gbnVsbDtcblxuICBjb25zdCBmaW5kU2hpcCA9IChpZCkgPT4ge1xuICAgIGxldCB0aGlzU2hpcDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2hpcHNbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgIHRoaXNTaGlwID0gc2hpcHNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzU2hpcDtcbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IHRhcmdldDtcbiAgICBjb25zdCB0aGlzVGlsZSA9IHRpbGVzW3hdW3ldO1xuICAgIGlmICh0aGlzVGlsZS5oaXQpIHJldHVybjtcblxuICAgIGlmIChoYXNTaGlwKHgsIHkpKSB7XG4gICAgICBjb25zdCB0aGlzU2hpcCA9IGZpbmRTaGlwKHRoaXNUaWxlLnNoaXBJZCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXNTaGlwLmNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpc1NoaXAuY29vcmRzW2ldLmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IHZhbHVlID09PSB0YXJnZXRbaW5kZXhdKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzU2hpcC5oZWFsdGhbaV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXNUaWxlLmhpdCA9IHRydWU7XG4gIH07XG5cbiAgY29uc3Qgc2hpcHNSZW1haW5pbmcgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsdGVyU2hpcHMgPSBzaGlwcy5maWx0ZXIoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkgPT09IGZhbHNlKTtcbiAgICByZXR1cm4gZmlsdGVyU2hpcHMubGVuZ3RoO1xuICB9O1xuXG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICBjb25zdCBzdW5rU2hpcHMgPSBzaGlwc1JlbWFpbmluZygpO1xuICAgIHJldHVybiBzdW5rU2hpcHMgPT09IDA7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0aWxlcyxcbiAgICBzaGlwcyxcbiAgICBwbGFjZVNoaXAsXG4gICAgaGFzU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIHNoaXBzUmVtYWluaW5nLFxuICAgIGFsbFNoaXBzU3VuayxcbiAgICByZW1vdmVMYXN0U2hpcCxcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoaXBGYWN0b3J5KGlkLCBsZW5ndGgpIHtcbiAgY29uc3QgY3JlYXRlSGVhbHRoID0gKHNpemUpID0+IHtcbiAgICBjb25zdCBhcnJheSA9IFsuLi5BcnJheShzaXplKS5rZXlzKCldO1xuICAgIGNvbnN0IGhlYWx0aCA9IGFycmF5LnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgcHJldltjdXJyXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBoZWFsdGg7XG4gIH07XG5cbiAgY29uc3QgY29vcmRzID0gW107XG5cbiAgY29uc3QgaGVhbHRoID0gY3JlYXRlSGVhbHRoKGxlbmd0aCk7XG4gIC8vIGhlYWx0aCA9IHsgd2hlcmUgYm9vbCByZXByZXNlbnRzIGhpdC9ubyBoaXRcbiAgLy8gICAwOiBmYWxzZSxcbiAgLy8gICAxOiBmYWxzZSxcbiAgLy8gICAyOiBmYWxzZSxcbiAgLy8gfVxuICBjb25zdCBoaXQgPSAoaW5kZXgpID0+IHtcbiAgICBoZWFsdGhbaW5kZXhdID0gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaGVhbHRoKS5ldmVyeSgoaW5kZXgpID0+IGluZGV4ID09PSB0cnVlKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIGxlbmd0aCxcbiAgICBoZWFsdGgsXG4gICAgY29vcmRzLFxuICAgIGhpdCxcbiAgICBpc1N1bmssXG4gIH07XG59XG4iLCJjb25zdCBnYW1lYm9hcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJvYXJkJyk7XG5jb25zdCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5ZXItYm9hcmQnKTtcbmNvbnN0IGNvbUJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbS1ib2FyZCcpO1xuY29uc3QgZ2FtZUluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2FtZS1pbmZvJyk7XG5cbmNvbnN0IHVwZGF0ZVNoaXBDb3VudCA9IChwbGF5ZXIpID0+IHtcbiAgY29uc3QgdGhpc0JvYXJkID0gcGxheWVyLmlzSHVtYW4gPyBwbGF5ZXJCb2FyZCA6IGNvbUJvYXJkO1xuICBjb25zdCBzaGlwQ291bnRlciA9IHRoaXNCb2FyZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICBjb25zdCBzaGlwc1JlbWFpbmluZyA9IHBsYXllci5ib2FyZC5zaGlwc1JlbWFpbmluZygpO1xuXG4gIHNoaXBDb3VudGVyLnRleHRDb250ZW50ID0gYFNoaXBzIHJlbWFpbmluZzogJHtzaGlwc1JlbWFpbmluZ31gO1xufTtcblxuY29uc3QgaGlkZVNoaXBDb3VudCA9IChib29sKSA9PiB7XG4gIGNvbnN0IHNoaXBDb3VudGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaGlwLWNvdW50ZXInKTtcbiAgaWYgKGJvb2wpIHtcbiAgICBzaGlwQ291bnRlcnMuZm9yRWFjaCgoZWxlbWVudCkgPT4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTAnKSk7XG4gIH0gZWxzZSB7XG4gICAgc2hpcENvdW50ZXJzLmZvckVhY2goKGVsZW1lbnQpID0+IGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnb3BhY2l0eS0wJykpO1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGVCb2FyZHMgPSAoKSA9PiB7XG4gIGdhbWVib2FyZHMuZm9yRWFjaCgoYm9hcmQpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBjb25zdCBib2FyZENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBib2FyZENlbGwuY2xhc3NMaXN0LmFkZCgnYm9hcmQtY2VsbCcpO1xuICAgICAgICBib2FyZENlbGwuZGF0YXNldC54ID0gajtcbiAgICAgICAgYm9hcmRDZWxsLmRhdGFzZXQueSA9IGk7XG4gICAgICAgIGJvYXJkLmFwcGVuZENoaWxkKGJvYXJkQ2VsbCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHJlbmRlclNoaXBzID0gKHBsYXllcikgPT4ge1xuICBjb25zdCBib2FyZCA9IHBsYXllci5pc0h1bWFuID8gcGxheWVyQm9hcmQgOiBjb21Cb2FyZDtcbiAgY29uc3QgeyBzaGlwcyB9ID0gcGxheWVyLmJvYXJkO1xuXG4gIGNvbnN0IHNoaXBLZXlzID0gT2JqZWN0LmtleXMoc2hpcHMpO1xuICBzaGlwS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBzaGlwID0gc2hpcHNba2V5XTtcbiAgICBjb25zdCB7IGlkIH0gPSBzaGlwO1xuICAgIGNvbnN0IHsgY29vcmRzIH0gPSBzaGlwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBbeCwgeV0gPSBjb29yZHNbaV07XG4gICAgICBjb25zdCB0aGlzQ2VsbCA9IGJvYXJkLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXg9JyR7eH0nXVtkYXRhLXk9JyR7eX0nXWApO1xuICAgICAgdGhpc0NlbGwuY2xhc3NMaXN0LmFkZCgnc2hpcCcpO1xuICAgICAgdGhpc0NlbGwuZGF0YXNldC5zaGlwSWQgPSBpZDtcbiAgICB9XG4gIH0pO1xuICB1cGRhdGVTaGlwQ291bnQocGxheWVyKTtcbn07XG5cbmNvbnN0IHVwZGF0ZUJvYXJkID0gKHBsYXllcikgPT4ge1xuICBjb25zdCB0aGlzQm9hcmQgPSBwbGF5ZXIuaXNIdW1hbiA/IHBsYXllckJvYXJkIDogY29tQm9hcmQ7XG4gIGNvbnN0IHsgYm9hcmQgfSA9IHBsYXllcjtcbiAgY29uc3QgeyB0aWxlcyB9ID0gYm9hcmQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IE9iamVjdC5rZXlzKHRpbGVzW2ldKS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgdGhpc1RpbGUgPSB0aWxlc1tpXVtqXTtcbiAgICAgIGNvbnN0IGhhc1NoaXAgPSBib2FyZC5oYXNTaGlwKGksIGopO1xuICAgICAgaWYgKHRoaXNUaWxlLmhpdCkge1xuICAgICAgICBjb25zdCB0aGlzQ2VsbCA9IHRoaXNCb2FyZC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGBbZGF0YS14PScke2l9J11bZGF0YS15PScke2p9J11gXG4gICAgICAgICk7XG4gICAgICAgIGlmIChoYXNTaGlwKSB7XG4gICAgICAgICAgdGhpc0NlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpc0NlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHVwZGF0ZVNoaXBDb3VudChwbGF5ZXIpO1xufTtcblxuY29uc3Qgc3R5bGVHYW1lT3ZlciA9IChib29sKSA9PiB7XG4gIGlmIChib29sKSB7XG4gICAgZ2FtZWJvYXJkcy5mb3JFYWNoKChib2FyZCkgPT4gYm9hcmQuY2xhc3NMaXN0LmFkZCgnZ2FtZS1vdmVyJykpO1xuICB9IGVsc2Uge1xuICAgIGdhbWVib2FyZHMuZm9yRWFjaCgoYm9hcmQpID0+IGJvYXJkLmNsYXNzTGlzdC5yZW1vdmUoJ2dhbWUtb3ZlcicpKTtcbiAgfVxufTtcblxuY29uc3QgY2xlYXJVSSA9ICguLi5wbGF5ZXJzKSA9PiB7XG4gIGdhbWVib2FyZHMuZm9yRWFjaCgoYm9hcmQpID0+IHtcbiAgICBjb25zdCBjZWxscyA9IGJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ib2FyZC1jZWxsJyk7XG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdtaXNzJywgJ2hpdCcsICdzaGlwJyk7XG4gICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zaGlwLWlkJyk7XG4gICAgfSk7XG4gIH0pO1xuICBwbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4gdXBkYXRlU2hpcENvdW50KHBsYXllcikpO1xuICBzdHlsZUdhbWVPdmVyKGZhbHNlKTtcbn07XG5cbmNvbnN0IGdhbWVNZXNzYWdlID0gKHN0YXRlLCBudW1TaGlwcykgPT4ge1xuICBjb25zdCByZW1haW5pbmdTaGlwcyA9IDUgLSBudW1TaGlwcztcbiAgY29uc3QgbWVzc2FnZXMgPSB7XG4gICAgc2V0dXA6IGBCb2FyZCBzZXR1cCAuLi4gJHtyZW1haW5pbmdTaGlwc30gc2hpcChzKSB0byBwbGFjZWAsXG4gICAgcmVhZHk6ICdHYW1lIHJlYWR5IHRvIHN0YXJ0JyxcbiAgICBwMVR1cm46ICdQbGF5ZXJcXCdzIHR1cm4nLFxuICAgIGNvbVR1cm46ICd0aGlua2luZyAuLi4nLFxuICB9O1xuICBnYW1lSW5mby50ZXh0Q29udGVudCA9IG1lc3NhZ2VzW3N0YXRlXTtcbn07XG5cbmNvbnN0IGFubm91bmNlR2FtZU92ZXIgPSAod2lubmVyKSA9PiB7XG4gIGNvbnN0IHdpbk1lc3NhZ2UgPVxuICAgIHdpbm5lci5udW0gPT09IDFcbiAgICAgID8gJ0NvbmdyYXR1bGF0aW9ucyEgWW91IHdpbiEnXG4gICAgICA6ICdHYW1lIG92ZXIgLi4uIENvbXB1dGVyIHdpbnMhJztcblxuICBnYW1lSW5mby50ZXh0Q29udGVudCA9IHdpbk1lc3NhZ2U7XG4gIHN0eWxlR2FtZU92ZXIodHJ1ZSk7XG59O1xuXG5jb25zdCBkaXNhYmxlRXZlbnRzID0gKGJvb2wsIGJvYXJkKSA9PiB7XG4gIGNvbnN0IHRoaXNCb2FyZCA9IGJvYXJkID09PSAnY29tJyA/IGNvbUJvYXJkIDogcGxheWVyQm9hcmQ7XG4gIGlmIChib29sKSB7XG4gICAgdGhpc0JvYXJkLmNsYXNzTGlzdC5hZGQoJ25vLWV2ZW50cycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXNCb2FyZC5jbGFzc0xpc3QucmVtb3ZlKCduby1ldmVudHMnKTtcbiAgfVxufTtcblxuY29uc3QgdG9nZ2xlU3RhcnQgPSAoc3RhdGUpID0+IHtcbiAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhcnQtYnRuJyk7XG5cbiAgaWYgKHN0YXRlKSB7XG4gICAgc3RhcnRCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydEJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIH1cbn07XG5cbmNvbnN0IHJlYWR5R2FtZSA9IChsZW5ndGgpID0+IHtcbiAgaWYgKGxlbmd0aCA9PT0gNSkge1xuICAgIHRvZ2dsZVN0YXJ0KGZhbHNlKTtcbiAgICBnYW1lTWVzc2FnZSgncmVhZHknKTtcbiAgfSBlbHNlIHtcbiAgICB0b2dnbGVTdGFydCh0cnVlKTtcbiAgICBnYW1lTWVzc2FnZSgnc2V0dXAnLCBsZW5ndGgpO1xuICB9XG59O1xuXG5jb25zdCBkaXNhYmxlQm9hcmRGdW5jcyA9IChib29sKSA9PiB7XG4gIGNvbnN0IGJvYXJkRnVuY3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYm9hcmQtZnVuY3MnKTtcbiAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllci1idXR0b25zJyk7XG4gIGlmIChib29sKSB7XG4gICAgYm9hcmRGdW5jcy5mb3JFYWNoKChidXR0b24pID0+IGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpKTtcbiAgICBidXR0b25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnb3BhY2l0eS0wJyk7XG4gIH0gZWxzZSB7XG4gICAgYm9hcmRGdW5jcy5mb3JFYWNoKChidXR0b24pID0+IGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpO1xuICAgIGJ1dHRvbkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5LTAnKTtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlQm9hcmRzLFxuICBjbGVhclVJLFxuICByZW5kZXJTaGlwcyxcbiAgdXBkYXRlQm9hcmQsXG4gIGRpc2FibGVFdmVudHMsXG4gIGFubm91bmNlR2FtZU92ZXIsXG4gIHRvZ2dsZVN0YXJ0LFxuICByZWFkeUdhbWUsXG4gIGRpc2FibGVCb2FyZEZ1bmNzLFxuICBnYW1lTWVzc2FnZSxcbiAgaGlkZVNoaXBDb3VudCxcbn07XG4iLCJjb25zdCBnZXRDZWxsSW5mbyA9ICh0YXJnZXQpID0+IHtcbiAgcmV0dXJuIFtOdW1iZXIodGFyZ2V0LmRhdGFzZXQueCksIE51bWJlcih0YXJnZXQuZGF0YXNldC55KV07XG59O1xuXG5jb25zdCBhbHJlYWR5UGxheWVkID0gKHBsYXllciwgdGFyZ2V0KSA9PiB7XG4gIGNvbnN0IHByZXZpb3VzTW92ZXMgPSBwbGF5ZXIubW92ZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldmlvdXNNb3Zlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmV2aW91c01vdmVzW2ldLmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IHZhbHVlID09PSB0YXJnZXRbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGdldEFkamFjZW50VGlsZXMgPSAodGlsZSkgPT4ge1xuICBjb25zdCBbeCwgeV0gPSB0aWxlO1xuICBjb25zdCBhZGphY2VudFRpbGVzID0gW1xuICAgIFt4ICsgMSwgeV0sXG4gICAgW3ggLSAxLCB5XSxcbiAgICBbeCwgeSArIDFdLFxuICAgIFt4LCB5IC0gMV0sXG4gIF07XG4gIHJldHVybiBhZGphY2VudFRpbGVzLmZpbHRlcigoYWRqYWNlbnQpID0+IHtcbiAgICBjb25zdCBbYSwgYl0gPSBhZGphY2VudDtcbiAgICByZXR1cm4gYSA+PSAwICYmIGEgPD0gOSAmJiBiID49IDAgJiYgYiA8PSA5O1xuICB9KTtcbn07XG5cbmNvbnN0IHRpbWVvdXQgPSAobXMpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0UmFuZG9tVGlsZSA9ICgpID0+IHtcbiAgY29uc3QgcmFuZG9tID0gW1xuICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSxcbiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCksXG4gIF07XG4gIHJldHVybiByYW5kb207XG59O1xuXG5jb25zdCBnZXRFbXB0eVRpbGVzID0gKHBsYXllcikgPT4ge1xuICBjb25zdCB7IGJvYXJkIH0gPSBwbGF5ZXI7XG4gIGNvbnN0IHsgdGlsZXMgfSA9IGJvYXJkO1xuICBjb25zdCBlbXB0eVRpbGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IE9iamVjdC5rZXlzKHRpbGVzW2ldKS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgaGFzU2hpcCA9IGJvYXJkLmhhc1NoaXAoaSwgaik7XG4gICAgICBpZiAoIWhhc1NoaXApIHtcbiAgICAgICAgY29uc3QgY29vcmQgPSBbaSwgal07XG4gICAgICAgIGVtcHR5VGlsZXMucHVzaChjb29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBlbXB0eVRpbGVzO1xufTtcblxuY29uc3QgZ2V0UmFuZG9tRW1wdHkgPSAocGxheWVyKSA9PiB7XG4gIGNvbnN0IGVtcHR5VGlsZXMgPSBnZXRFbXB0eVRpbGVzKHBsYXllcik7XG5cbiAgcmV0dXJuIGVtcHR5VGlsZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW1wdHlUaWxlcy5sZW5ndGgpXTtcbn07XG5cbmNvbnN0IG5leHRTaGlwTGVuZ3RoID0gKG51bVNoaXBzUGxhY2VkKSA9PiB7XG4gIHN3aXRjaCAobnVtU2hpcHNQbGFjZWQpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gNTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gNDtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gMjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IGdldFJhbmRvbUF4aXMgPSAoKSA9PiBbJ3gnLCAneSddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcblxuZXhwb3J0IHtcbiAgZ2V0Q2VsbEluZm8sXG4gIGFscmVhZHlQbGF5ZWQsXG4gIHRpbWVvdXQsXG4gIGdldFJhbmRvbVRpbGUsXG4gIGdldFJhbmRvbUVtcHR5LFxuICBuZXh0U2hpcExlbmd0aCxcbiAgZ2V0UmFuZG9tQXhpcyxcbiAgZ2V0QWRqYWNlbnRUaWxlcyxcbn07XG4iLCJpbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5cbmNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllci1ib2FyZCcpO1xuXG4vLyBTaGlwIHJvdGF0aW9uIHdoZXJlIHggPSBwbGFjZSBob3Jpem9udGFsbHksIHkgPSBwbGFjZSB2ZXJ0aWNhbGx5XG5jb25zdCBheGVzID0ge1xuICB4OiB0cnVlLFxuICB5OiBmYWxzZSxcbn07XG5cbmNvbnN0IGdldEF4aXMgPSAoKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhheGVzKTtcbiAgcmV0dXJuIGtleXMuZmlsdGVyKChrZXkpID0+IGF4ZXNba2V5XSA9PT0gdHJ1ZSlbMF07XG59O1xuXG5jb25zdCBzd2l0Y2hBeGlzID0gKCkgPT4ge1xuICBheGVzLnggPSAhYXhlcy54O1xuICBheGVzLnkgPSAhYXhlcy54O1xufTtcblxuLy8gUmV0dXJucyBhcnJheSBvZiBbeCwgeV0gY29vcmRzIG9mIGEgc2hpcCBvZiBsZW5ndGgsIGJ1aWx0IG9uIGF4aXMsIGF0IHN0YXJ0IGluZGV4XG5jb25zdCBidWlsZFNoaXAgPSAoc3RhcnQsIGF4aXMsIGxlbmd0aCkgPT4ge1xuICBjb25zdCBbeCwgeV0gPSBzdGFydDtcbiAgY29uc3Qgc2hpcENvb3JkcyA9IFtdO1xuXG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzaGlwQ29vcmRzLnB1c2goW2kgKyB4LCB5XSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHNoaXBDb29yZHMucHVzaChbeCwgaSArIHldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2hpcENvb3Jkcztcbn07XG5cbi8qIFZhbGlkIGNoZWNrcyBmb3Igc2hpcCBvYmplY3Qgb24gYm9hcmQgb2JqZWN0ICovXG4vLyAgQ2hlY2sgaWYgc2hpcCBvZiBsZW5ndGggJiBheGlzIGZpdHMgd2l0aGluIDEweDEwIGdhbWVib2FyZCBib3VuZGFyaWVzXG5jb25zdCBkb2VzU2hpcEZpdCA9IChsZW5ndGgsIGF4aXMsIHN0YXJ0SW5kZXgpID0+IHtcbiAgY29uc3QgW3gsIHldID0gc3RhcnRJbmRleDtcbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIHJldHVybiB4ICsgbGVuZ3RoIC0gMSA8PSA5O1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICByZXR1cm4geSArIGxlbmd0aCAtIDEgPD0gOTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBDaGVja3Mgc2hpcCBkb2VzIG5vdCBvdmVybGFwIHdpdGggYW5vdGhlclxuY29uc3Qgbm9PdmVybGFwID0gKHNoaXAsIHBsYXllcikgPT4ge1xuICBjb25zdCB7IGJvYXJkIH0gPSBwbGF5ZXI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IFt4LCB5XSA9IHNoaXBbaV07XG4gICAgaWYgKGJvYXJkLmhhc1NoaXAoeCwgeSkgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBpc1NoaXBWYWxpZCA9IChwbGF5ZXIsIHN0YXJ0LCBheGlzLCBsZW5ndGgpID0+IHtcbiAgY29uc3Qgc2hpcEZpdHMgPSBkb2VzU2hpcEZpdChsZW5ndGgsIGF4aXMsIHN0YXJ0KTtcblxuICBpZiAoc2hpcEZpdHMpIHtcbiAgICBjb25zdCBzaGlwID0gYnVpbGRTaGlwKHN0YXJ0LCBheGlzLCBsZW5ndGgpO1xuICAgIGlmIChub092ZXJsYXAoc2hpcCwgcGxheWVyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qIFByZXZpZXdpbmcgc2hpcCBwbGFjZW1lbnQgb24gRE9NICovXG5jb25zdCBpc1ByZXZpZXdWYWxpZCA9IChjb29yZHMsIGxlbmd0aCkgPT4ge1xuICBjb25zdCBpc1dpdGhpbkJvdW5kcyA9IGNvb3Jkcy5sZW5ndGggPT09IGxlbmd0aDtcbiAgY29uc3Qgbm9PdGhlclNoaXBzID0gY29vcmRzLmV2ZXJ5KFxuICAgIChjb29yZCkgPT4gIWNvb3JkLmNsYXNzTGlzdC5jb250YWlucygnc2hpcCcpXG4gICk7XG4gIHJldHVybiBpc1dpdGhpbkJvdW5kcyAmJiBub090aGVyU2hpcHM7XG59O1xuXG5jb25zdCBidWlsZFByZXZpZXcgPSAoc3RhcnQsIGxlbmd0aCwgYXhpcywgYm9hcmQpID0+IHtcbiAgY29uc3QgW3gsIHldID0gc3RhcnQ7XG4gIGNvbnN0IHNoaXBDb29yZHMgPSBbXTtcblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgLy8gPjkgPSBvdXQgb2YgYm91bmRzXG4gICAgICBpZiAoaSArIHggPiA5KSBicmVhaztcbiAgICAgIGNvbnN0IG5leHRDZWxsID0gYm9hcmQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYFtkYXRhLXg9JyR7aSArIHh9J11bZGF0YS15PScke3l9J11gXG4gICAgICApO1xuICAgICAgc2hpcENvb3Jkcy5wdXNoKG5leHRDZWxsKTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgLy8gPjkgPSBvdXQgb2YgYm91bmRzXG4gICAgICBpZiAoaSArIHkgPiA5KSBicmVhaztcblxuICAgICAgY29uc3QgbmV4dENlbGwgPSBib2FyZC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgW2RhdGEteD0nJHt4fSddW2RhdGEteT0nJHtpICsgeX0nXWBcbiAgICAgICk7XG4gICAgICBzaGlwQ29vcmRzLnB1c2gobmV4dENlbGwpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaGlwQ29vcmRzO1xufTtcblxuY29uc3QgcHJldmlld1NoaXAgPSAoZSwgbGVuZ3RoKSA9PiB7XG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2JvYXJkJykgfHwgbGVuZ3RoID09PSBudWxsKSByZXR1cm47XG5cbiAgY29uc3Qgc3RhcnRpbmdJbmRleCA9IGhlbHBlcnMuZ2V0Q2VsbEluZm8oZS50YXJnZXQpO1xuICBjb25zdCBheGlzID0gZ2V0QXhpcygpO1xuICBjb25zdCBzaGlwQ29vcmRzID0gYnVpbGRQcmV2aWV3KHN0YXJ0aW5nSW5kZXgsIGxlbmd0aCwgYXhpcywgcGxheWVyQm9hcmQpO1xuICBjb25zdCB2YWxpZFByZXZpZXcgPSBpc1ByZXZpZXdWYWxpZChzaGlwQ29vcmRzLCBsZW5ndGgpO1xuXG4gIGlmICh2YWxpZFByZXZpZXcpIHtcbiAgICBzaGlwQ29vcmRzLmZvckVhY2goKGNlbGwpID0+IGNlbGwuY2xhc3NMaXN0LmFkZCgnc2hpcC1wcmV2aWV3JykpO1xuICB9IGVsc2Uge1xuICAgIHNoaXBDb29yZHMuZm9yRWFjaCgoY2VsbCkgPT4gY2VsbC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJykpO1xuICB9XG59O1xuXG5jb25zdCBjbGVhclByZXZpZXcgPSAoKSA9PiB7XG4gIGNvbnN0IGNlbGxzID0gcGxheWVyQm9hcmQucXVlcnlTZWxlY3RvckFsbCgnLmJvYXJkLWNlbGwnKTtcbiAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4gY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzaGlwLXByZXZpZXcnLCAnaW52YWxpZCcpKTtcbn07XG5cbmV4cG9ydCB7XG4gIGJ1aWxkU2hpcCxcbiAgbm9PdmVybGFwLFxuICBkb2VzU2hpcEZpdCxcbiAgZ2V0QXhpcyxcbiAgc3dpdGNoQXhpcyxcbiAgcHJldmlld1NoaXAsXG4gIGNsZWFyUHJldmlldyxcbiAgaXNTaGlwVmFsaWQsXG59O1xuIiwiaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0ICogYXMgc2hpcEJ1aWxkZXIgZnJvbSAnLi9zaGlwQnVpbGRlcic7XG5cbmNvbnN0IGZpbmRTbWFydGlzaE1vdmVzID0gKGNvbSwgcGxheWVyKSA9PiB7XG4gIGNvbnN0IHByZXZpb3VzSGl0cyA9IGNvbS5tb3Zlcy5maWx0ZXIoKFt4LCB5XSkgPT4ge1xuICAgIHJldHVybiBwbGF5ZXIuYm9hcmQudGlsZXNbeF1beV0uc2hpcElkICE9PSBudWxsO1xuICB9KTtcblxuICBjb25zdCBhZGphY2VudFRpbGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldmlvdXNIaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdGlsZSA9IHByZXZpb3VzSGl0c1tpXTtcbiAgICBjb25zdCBvdXRwdXQgPSBoZWxwZXJzLmdldEFkamFjZW50VGlsZXModGlsZSk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBvdXRwdXQubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFkamFjZW50VGlsZXMucHVzaChvdXRwdXRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhZGphY2VudFRpbGVzLmZpbHRlcigoW3gsIHldKSA9PiB7XG4gICAgcmV0dXJuIHBsYXllci5ib2FyZC50aWxlc1t4XVt5XS5oaXQgPT09IGZhbHNlO1xuICB9KTtcbn07XG5cbmNvbnN0IGF1dG9BdHRhY2sgPSBhc3luYyAoY29tLCBwbGF5ZXIpID0+IHtcbiAgY29uc3Qgc21hcnRpc2hNb3ZlcyA9IGZpbmRTbWFydGlzaE1vdmVzKGNvbSwgcGxheWVyKTtcbiAgbGV0IG1vdmU7XG4gIGlmIChzbWFydGlzaE1vdmVzLmxlbmd0aCA+IDApIHtcbiAgICBtb3ZlID0gc21hcnRpc2hNb3Zlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzbWFydGlzaE1vdmVzLmxlbmd0aCldO1xuICB9IGVsc2Uge1xuICAgIGxldCByYW5kb21Nb3ZlID0gaGVscGVycy5nZXRSYW5kb21UaWxlKCk7XG4gICAgd2hpbGUgKGhlbHBlcnMuYWxyZWFkeVBsYXllZChjb20sIHJhbmRvbU1vdmUpKSB7XG4gICAgICByYW5kb21Nb3ZlID0gaGVscGVycy5nZXRSYW5kb21UaWxlKCk7XG4gICAgfVxuICAgIG1vdmUgPSByYW5kb21Nb3ZlO1xuICB9XG4gIGF3YWl0IGhlbHBlcnMudGltZW91dCg0MDApO1xuICByZXR1cm4gbW92ZTtcbn07XG5cbi8qIFJhbmRvbSBzaGlwIHBsYWNlbWVudCAqL1xuLyogUmV0dXJucyBhIHJhbmRvbSBzdGFydGluZ0luZGV4ICYgYXhpcyAodG8gcGxhY2UgYSBzaGlwKSB0aGF0IHdpbGwgZml0IHdpdGhpbiBcbiAgMTB4MTAgYm9hcmQgKi9cbmNvbnN0IGdldFZhbGlkU3RhcnQgPSAocGxheWVyLCBsZW5ndGgpID0+IHtcbiAgbGV0IHN0YXJ0SW5kZXg7XG4gIGxldCBheGlzO1xuICBsZXQgc2hpcEZpdHMgPSBmYWxzZTtcbiAgd2hpbGUgKCFzaGlwRml0cykge1xuICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gaGVscGVycy5nZXRSYW5kb21FbXB0eShwbGF5ZXIpO1xuICAgIGNvbnN0IHJhbmRvbUF4aXMgPSBoZWxwZXJzLmdldFJhbmRvbUF4aXMoKTtcbiAgICBzaGlwRml0cyA9IHNoaXBCdWlsZGVyLmRvZXNTaGlwRml0KGxlbmd0aCwgcmFuZG9tQXhpcywgcmFuZG9tSW5kZXgpO1xuICAgIHN0YXJ0SW5kZXggPSByYW5kb21JbmRleDtcbiAgICBheGlzID0gcmFuZG9tQXhpcztcbiAgfVxuICByZXR1cm4gW3N0YXJ0SW5kZXgsIGF4aXNdO1xufTtcblxuLyogR2VuZXJhdGVzIGEgcmFuZG9tIHNoaXAgcG9zaXRpb24gdGhhdCBwYXNzZXMgY2hlY2tzOlxuICAxLiBzaGlwIG9mIGxlbmd0aCBhLCBwbGFjZWQgb24gYXhpcyBiIHdpbGwgZml0IHdpdGhpbiB0aGUgMTB4MTAgYm9hcmRcbiAgMi4gc2hpcCBkb2VzIG5vdCBvdmVybGFwIHdpdGggYW4gYWxyZWFkeSBwbGFjZWQgc2hpcCAqL1xuY29uc3QgcmFuZG9tU2hpcCA9IChwbGF5ZXIsIGxlbmd0aCkgPT4ge1xuICBsZXQgc3RhcnQ7XG4gIGxldCBheGlzO1xuICBsZXQgdmFsaWQgPSBmYWxzZTtcbiAgd2hpbGUgKCF2YWxpZCkge1xuICAgIGNvbnN0IFtyYW5kb21JbmRleCwgcmFuZG9tQXhpc10gPSBnZXRWYWxpZFN0YXJ0KHBsYXllciwgbGVuZ3RoKTtcbiAgICBjb25zdCBzaGlwID0gc2hpcEJ1aWxkZXIuYnVpbGRTaGlwKHJhbmRvbUluZGV4LCByYW5kb21BeGlzLCBsZW5ndGgpO1xuICAgIHZhbGlkID0gc2hpcEJ1aWxkZXIubm9PdmVybGFwKHNoaXAsIHBsYXllcik7XG4gICAgc3RhcnQgPSByYW5kb21JbmRleDtcbiAgICBheGlzID0gcmFuZG9tQXhpcztcbiAgfVxuICByZXR1cm4gW3N0YXJ0LCBheGlzXTtcbn07XG5cbmNvbnN0IGF1dG9QbGFjZSA9IChwbGF5ZXIsIHNoaXBzU29GYXIgPSAwKSA9PiB7XG4gIGNvbnN0IHNoaXBzID0gWzUsIDQsIDMsIDMsIDJdO1xuXG4gIGZvciAobGV0IGkgPSBzaGlwc1NvRmFyOyBpIDwgc2hpcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsZW5ndGggPSBzaGlwc1tpXTtcbiAgICBjb25zdCBzaGlwID0gcmFuZG9tU2hpcChwbGF5ZXIsIGxlbmd0aCk7XG4gICAgcGxheWVyLmJvYXJkLnBsYWNlU2hpcChsZW5ndGgsIC4uLnNoaXApO1xuICB9XG59O1xuXG5leHBvcnQgeyBhdXRvQXR0YWNrLCBhdXRvUGxhY2UgfTtcbiIsImltcG9ydCBwbGF5ZXJGYWN0b3J5IGZyb20gJy4vcGxheWVyRmFjdG9yeSc7XG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnLi9kb20nO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0ICogYXMgc2hpcEJ1aWxkZXIgZnJvbSAnLi9zaGlwQnVpbGRlcic7XG5pbXBvcnQgKiBhcyBib3RMb2dpYyBmcm9tICcuL2JvdExvZ2ljJztcblxuY29uc3QgcGxheWVycyA9IHtcbiAgcDE6IG51bGwsXG4gIGNvbTogbnVsbCxcbn07XG5cbmNvbnN0IGNoZWNrR2FtZVN0YXRlID0gKHBsYXllcikgPT4gcGxheWVyLmJvYXJkLmFsbFNoaXBzU3VuaygpO1xuXG5jb25zdCBuZXdHYW1lID0gKCkgPT4ge1xuICBwbGF5ZXJzLnAxID0gcGxheWVyRmFjdG9yeSgxLCB0cnVlKTtcbiAgcGxheWVycy5jb20gPSBwbGF5ZXJGYWN0b3J5KDIsIGZhbHNlKTtcblxuICBkb20uY2xlYXJVSShwbGF5ZXJzLnAxLCBwbGF5ZXJzLmNvbSk7XG4gIGRvbS50b2dnbGVTdGFydCh0cnVlKTtcbiAgZG9tLmRpc2FibGVFdmVudHModHJ1ZSwgJ2NvbScpO1xuICBkb20uZGlzYWJsZUV2ZW50cyhmYWxzZSwgJ3BsYXllcicpO1xuICBkb20uZGlzYWJsZUJvYXJkRnVuY3MoZmFsc2UpO1xuICBkb20uZ2FtZU1lc3NhZ2UoJ3NldHVwJywgcGxheWVycy5wMS5ib2FyZC5zaGlwcy5sZW5ndGgpO1xuICBkb20uaGlkZVNoaXBDb3VudCh0cnVlKTtcbn07XG5cbmNvbnN0IHN0YXJ0R2FtZSA9ICgpID0+IHtcbiAgYm90TG9naWMuYXV0b1BsYWNlKHBsYXllcnMuY29tKTtcblxuICBkb20udG9nZ2xlU3RhcnQodHJ1ZSk7XG4gIGRvbS51cGRhdGVCb2FyZChwbGF5ZXJzLmNvbSk7XG4gIGRvbS5kaXNhYmxlRXZlbnRzKHRydWUsICdwbGF5ZXInKTtcbiAgZG9tLmRpc2FibGVFdmVudHMoZmFsc2UsICdjb20nKTtcbiAgZG9tLmRpc2FibGVCb2FyZEZ1bmNzKHRydWUpO1xuICBkb20uZ2FtZU1lc3NhZ2UoJ3AxVHVybicpO1xuICBkb20uaGlkZVNoaXBDb3VudChmYWxzZSk7XG59O1xuXG5jb25zdCBlbmRHYW1lID0gKHdpbm5lcikgPT4ge1xuICBkb20uZGlzYWJsZUV2ZW50cyh0cnVlLCAnY29tJyk7XG4gIGRvbS5hbm5vdW5jZUdhbWVPdmVyKHdpbm5lcik7XG59O1xuXG5jb25zdCBwbGF5Q29tTW92ZSA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBwMSwgY29tIH0gPSBwbGF5ZXJzO1xuICBjb25zdCBjb21BdHRhY2sgPSBhd2FpdCBib3RMb2dpYy5hdXRvQXR0YWNrKGNvbSwgcDEpO1xuXG4gIGNvbS5tYWtlTW92ZShjb21BdHRhY2ssIHAxLmJvYXJkKTtcbiAgZG9tLnVwZGF0ZUJvYXJkKHAxKTtcblxuICBjb25zdCB3aW5TdGF0ZSA9IGNoZWNrR2FtZVN0YXRlKHAxKTtcbiAgaWYgKHdpblN0YXRlKSB7XG4gICAgZW5kR2FtZShjb20pO1xuICB9IGVsc2Uge1xuICAgIGRvbS5kaXNhYmxlRXZlbnRzKGZhbHNlLCAnY29tJyk7XG4gICAgZG9tLmdhbWVNZXNzYWdlKCdwMVR1cm4nKTtcbiAgfVxufTtcblxuY29uc3QgcmVjZWl2ZVBsYXllck1vdmUgPSAoY29vcmQpID0+IHtcbiAgY29uc3QgeyBwMSwgY29tIH0gPSBwbGF5ZXJzO1xuICBpZiAoaGVscGVycy5hbHJlYWR5UGxheWVkKHAxLCBjb29yZCkpIHJldHVybjtcbiAgcDEubWFrZU1vdmUoY29vcmQsIGNvbS5ib2FyZCk7XG4gIGRvbS51cGRhdGVCb2FyZChjb20pO1xuXG4gIGNvbnN0IHdpblN0YXRlID0gY2hlY2tHYW1lU3RhdGUoY29tKTtcbiAgaWYgKHdpblN0YXRlKSB7XG4gICAgZW5kR2FtZShwMSk7XG4gIH0gZWxzZSB7XG4gICAgcGxheUNvbU1vdmUocDEsIGNvbSk7XG4gICAgZG9tLmdhbWVNZXNzYWdlKCdjb21UdXJuJyk7XG4gIH1cbiAgZG9tLmRpc2FibGVFdmVudHModHJ1ZSwgJ2NvbScpO1xufTtcblxuY29uc3QgZ2V0U2hpcHNQbGFjZWQgPSAoKSA9PiBwbGF5ZXJzLnAxLmJvYXJkLnNoaXBzLmxlbmd0aDtcblxuY29uc3QgcGxhY2VTaGlwID0gKGUpID0+IHtcbiAgY29uc3QgeyBwMSB9ID0gcGxheWVycztcbiAgY29uc3Qgc2hpcHNQbGFjZWRTdGFydCA9IGdldFNoaXBzUGxhY2VkKCk7XG5cbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYm9hcmQnKSB8fCBzaGlwc1BsYWNlZFN0YXJ0ID49IDUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzdGFydEluZGV4ID0gaGVscGVycy5nZXRDZWxsSW5mbyhlLnRhcmdldCk7XG4gIGNvbnN0IG5leHRTaGlwID0gaGVscGVycy5uZXh0U2hpcExlbmd0aChzaGlwc1BsYWNlZFN0YXJ0KTtcbiAgY29uc3QgYXhpcyA9IHNoaXBCdWlsZGVyLmdldEF4aXMoKTtcbiAgY29uc3Qgc2hpcFZhbGlkID0gc2hpcEJ1aWxkZXIuaXNTaGlwVmFsaWQocDEsIHN0YXJ0SW5kZXgsIGF4aXMsIG5leHRTaGlwKTtcblxuICBpZiAoc2hpcFZhbGlkKSB7XG4gICAgcDEuYm9hcmQucGxhY2VTaGlwKG5leHRTaGlwLCBzdGFydEluZGV4LCBheGlzKTtcbiAgICBzaGlwQnVpbGRlci5jbGVhclByZXZpZXcoKTtcbiAgICBkb20ucmVuZGVyU2hpcHMocDEpO1xuXG4gICAgY29uc3Qgc2hpcHNQbGFjZWRFbmQgPSBnZXRTaGlwc1BsYWNlZCgpO1xuICAgIGRvbS5yZWFkeUdhbWUoc2hpcHNQbGFjZWRFbmQpO1xuICB9XG59O1xuXG5jb25zdCB1bmRvU2hpcCA9ICgpID0+IHtcbiAgY29uc3QgeyBwMSB9ID0gcGxheWVycztcbiAgaWYgKHAxLmJvYXJkLnNoaXBzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBwMS5ib2FyZC5yZW1vdmVMYXN0U2hpcCgpO1xuXG4gIGRvbS5jbGVhclVJKHAxKTtcbiAgZG9tLnJlbmRlclNoaXBzKHAxKTtcbiAgZG9tLnJlYWR5R2FtZShnZXRTaGlwc1BsYWNlZCgpKTtcbn07XG5cbmNvbnN0IGF1dG9QbGFjZVBsYXllciA9ICgpID0+IHtcbiAgY29uc3QgeyBwMSB9ID0gcGxheWVycztcbiAgY29uc3Qgc2hpcHNQbGFjZWQgPSBnZXRTaGlwc1BsYWNlZCgpO1xuXG4gIGJvdExvZ2ljLmF1dG9QbGFjZShwMSwgc2hpcHNQbGFjZWQpO1xuICBkb20ucmVuZGVyU2hpcHMocDEpO1xuICBkb20ucmVhZHlHYW1lKGdldFNoaXBzUGxhY2VkKCkpO1xuXG4gIGlmIChzaGlwc1BsYWNlZCA9PT0gNSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICB1bmRvU2hpcCgpO1xuICAgIH1cbiAgICBhdXRvUGxhY2VQbGF5ZXIoKTtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgbmV3R2FtZSxcbiAgc3RhcnRHYW1lLFxuICByZWNlaXZlUGxheWVyTW92ZSxcbiAgcGxhY2VTaGlwLFxuICBnZXRTaGlwc1BsYWNlZCxcbiAgYXV0b1BsYWNlUGxheWVyLFxuICB1bmRvU2hpcCxcbn07XG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCAqIGFzIGdhbWUgZnJvbSAnLi9tb2R1bGVzL2dhbWUnO1xuaW1wb3J0ICogYXMgZG9tIGZyb20gJy4vbW9kdWxlcy9kb20nO1xuaW1wb3J0ICogYXMgZXZlbnRDb250cm9sbGVyIGZyb20gJy4vbW9kdWxlcy9ldmVudENvbnRyb2xsZXInO1xuXG5kb20uY3JlYXRlQm9hcmRzKCk7XG5nYW1lLm5ld0dhbWUoKTtcblxuZXZlbnRDb250cm9sbGVyLmluaXRCb2FyZEV2ZW50cygpO1xuZXZlbnRDb250cm9sbGVyLmluaXRHYW1lQnV0dG9ucygpO1xuZXZlbnRDb250cm9sbGVyLmluaXRTaGlwUGxhY2VtZW50KCk7XG4iLCJpbXBvcnQgKiBhcyBnYW1lIGZyb20gJy4vZ2FtZSc7XG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgKiBhcyBzaGlwQnVpbGRlciBmcm9tICcuL3NoaXBCdWlsZGVyJztcblxuY29uc3QgaW5pdEJvYXJkRXZlbnRzID0gKCkgPT4ge1xuICBjb25zdCBjb21DZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNjb20tYm9hcmQgLmJvYXJkLWNlbGwnKTtcbiAgY29tQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgY29uc3QgY29vcmQgPSBoZWxwZXJzLmdldENlbGxJbmZvKGUudGFyZ2V0KTtcbiAgICAgIGdhbWUucmVjZWl2ZVBsYXllck1vdmUoY29vcmQpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGluaXRHYW1lQnV0dG9ucyA9ICgpID0+IHtcbiAgY29uc3QgcmVzdGFydEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXN0YXJ0LWJ0bicpO1xuICByZXN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZ2FtZS5uZXdHYW1lKTtcblxuICBjb25zdCBzdGFydEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydC1idG4nKTtcbiAgc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnYW1lLnN0YXJ0R2FtZSk7XG5cbiAgY29uc3QgYXV0b0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdXRvLXNoaXAnKTtcbiAgYXV0b0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGdhbWUuYXV0b1BsYWNlUGxheWVyKTtcblxuICBjb25zdCByb3RhdGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm90YXRlJyk7XG4gIHJvdGF0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNoaXBCdWlsZGVyLnN3aXRjaEF4aXMpO1xuXG4gIGNvbnN0IHVuZG9CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdW5kby1zaGlwJyk7XG4gIHVuZG9CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnYW1lLnVuZG9TaGlwKTtcblxuICBjb25zdCByZXNldEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNldC1zaGlwJyk7XG4gIHJlc2V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZ2FtZS5uZXdHYW1lKTtcbn07XG5cbmNvbnN0IGluaXRTaGlwUGxhY2VtZW50ID0gKCkgPT4ge1xuICBjb25zdCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5ZXItYm9hcmQnKTtcbiAgcGxheWVyQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcbiAgICBjb25zdCBzaGlwc1BsYWNlZCA9IGdhbWUuZ2V0U2hpcHNQbGFjZWQoKTtcbiAgICBjb25zdCBuZXh0U2hpcCA9IGhlbHBlcnMubmV4dFNoaXBMZW5ndGgoc2hpcHNQbGFjZWQpO1xuICAgIHNoaXBCdWlsZGVyLnByZXZpZXdTaGlwKGUsIG5leHRTaGlwKTtcbiAgfSk7XG4gIHBsYXllckJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0Jywgc2hpcEJ1aWxkZXIuY2xlYXJQcmV2aWV3KTtcbiAgcGxheWVyQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnYW1lLnBsYWNlU2hpcCk7XG59O1xuXG5leHBvcnQgeyBpbml0Qm9hcmRFdmVudHMsIGluaXRHYW1lQnV0dG9ucywgaW5pdFNoaXBQbGFjZW1lbnQgfTtcbiJdLCJuYW1lcyI6WyJwbGF5ZXJGYWN0b3J5IiwibnVtIiwiaHVtYW4iLCJnYW1lYm9hcmQiLCJ0aWxlcyIsIkFycmF5IiwiaSIsImoiLCJoaXQiLCJzaGlwSWQiLCJjcmVhdGVCb2FyZCIsInNoaXBzIiwiaGFzU2hpcCIsIngiLCJ5Iiwic2hpcHNSZW1haW5pbmciLCJmaWx0ZXIiLCJzaGlwIiwiaXNTdW5rIiwibGVuZ3RoIiwicGxhY2VTaGlwIiwiYXhpcyIsImlkIiwic29tZSIsIm1hcFNoaXBJZCIsIm5ld1NoaXAiLCJoZWFsdGgiLCJrZXlzIiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJjb29yZHMiLCJpbmRleCIsIk9iamVjdCIsInZhbHVlcyIsImV2ZXJ5Iiwic2hpcEZhY3RvcnkiLCJwdXNoIiwicmVjZWl2ZUF0dGFjayIsInRhcmdldCIsInRoaXNUaWxlIiwidGhpc1NoaXAiLCJmaW5kU2hpcCIsInZhbHVlIiwiYWxsU2hpcHNTdW5rIiwicmVtb3ZlTGFzdFNoaXAiLCJzcGxpY2UiLCJnYW1lYm9hcmRGYWN0b3J5IiwibW92ZXMiLCJib2FyZCIsImlzSHVtYW4iLCJtYWtlTW92ZSIsImVuZW15Qm9hcmQiLCJnYW1lYm9hcmRzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGxheWVyQm9hcmQiLCJxdWVyeVNlbGVjdG9yIiwiY29tQm9hcmQiLCJnYW1lSW5mbyIsInVwZGF0ZVNoaXBDb3VudCIsInBsYXllciIsInNoaXBDb3VudGVyIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInRleHRDb250ZW50IiwiaGlkZVNoaXBDb3VudCIsImJvb2wiLCJzaGlwQ291bnRlcnMiLCJmb3JFYWNoIiwiZWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInJlbmRlclNoaXBzIiwia2V5IiwidGhpc0NlbGwiLCJkYXRhc2V0IiwidXBkYXRlQm9hcmQiLCJ0aGlzQm9hcmQiLCJzdHlsZUdhbWVPdmVyIiwiY2xlYXJVSSIsInBsYXllcnMiLCJjZWxsIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2FtZU1lc3NhZ2UiLCJzdGF0ZSIsIm51bVNoaXBzIiwibWVzc2FnZXMiLCJzZXR1cCIsInJlYWR5IiwicDFUdXJuIiwiY29tVHVybiIsImRpc2FibGVFdmVudHMiLCJ0b2dnbGVTdGFydCIsInN0YXJ0QnRuIiwic2V0QXR0cmlidXRlIiwicmVhZHlHYW1lIiwiZGlzYWJsZUJvYXJkRnVuY3MiLCJib2FyZEZ1bmNzIiwiYnV0dG9uQ29udGFpbmVyIiwiYnV0dG9uIiwiZ2V0Q2VsbEluZm8iLCJOdW1iZXIiLCJhbHJlYWR5UGxheWVkIiwicHJldmlvdXNNb3ZlcyIsImdldEFkamFjZW50VGlsZXMiLCJ0aWxlIiwiYWRqYWNlbnQiLCJhIiwiYiIsImdldFJhbmRvbVRpbGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJnZXRSYW5kb21FbXB0eSIsImVtcHR5VGlsZXMiLCJjb29yZCIsImdldEVtcHR5VGlsZXMiLCJuZXh0U2hpcExlbmd0aCIsIm51bVNoaXBzUGxhY2VkIiwiYXhlcyIsImdldEF4aXMiLCJzd2l0Y2hBeGlzIiwiYnVpbGRTaGlwIiwic3RhcnQiLCJzaGlwQ29vcmRzIiwiZG9lc1NoaXBGaXQiLCJzdGFydEluZGV4Iiwibm9PdmVybGFwIiwiY2xlYXJQcmV2aWV3IiwiZ2V0VmFsaWRTdGFydCIsInNoaXBGaXRzIiwicmFuZG9tSW5kZXgiLCJyYW5kb21BeGlzIiwicmFuZG9tU2hpcCIsInZhbGlkIiwiYXV0b1BsYWNlIiwic2hpcHNTb0ZhciIsInAxIiwiY29tIiwiY2hlY2tHYW1lU3RhdGUiLCJuZXdHYW1lIiwic3RhcnRHYW1lIiwiZW5kR2FtZSIsIndpbm5lciIsIndpbk1lc3NhZ2UiLCJyZWNlaXZlUGxheWVyTW92ZSIsImFzeW5jIiwiY29tQXR0YWNrIiwic21hcnRpc2hNb3ZlcyIsInByZXZpb3VzSGl0cyIsImFkamFjZW50VGlsZXMiLCJvdXRwdXQiLCJmaW5kU21hcnRpc2hNb3ZlcyIsIm1vdmUiLCJyYW5kb21Nb3ZlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicGxheUNvbU1vdmUiLCJnZXRTaGlwc1BsYWNlZCIsImUiLCJzaGlwc1BsYWNlZFN0YXJ0IiwiY29udGFpbnMiLCJuZXh0U2hpcCIsInNoaXBWYWxpZCIsInNoaXBzUGxhY2VkRW5kIiwidW5kb1NoaXAiLCJhdXRvUGxhY2VQbGF5ZXIiLCJzaGlwc1BsYWNlZCIsImJvYXJkQ2VsbCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJuZXh0Q2VsbCIsImJ1aWxkUHJldmlldyIsInZhbGlkUHJldmlldyIsImlzV2l0aGluQm91bmRzIiwibm9PdGhlclNoaXBzIiwiaXNQcmV2aWV3VmFsaWQiXSwic291cmNlUm9vdCI6IiJ9